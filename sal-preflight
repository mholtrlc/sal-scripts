#!/usr/bin/python
#
#    preflight
#        Retrieves queries to run in osquery
#

import errno
import os
import sys
import subprocess
from Foundation import *
import utils
import tempfile
import shutil

def is_exe(fpath):
    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def main():
    # Test if osqueryi is installed. No point continuing if not.
    if not is_exe('/usr/local/bin/osqueryi'):
        sys.exit(0)

    # Get the SalURL from the prefs
    sal_url = utils.pref('ServerURL')
    preflighturl = sal_url+'/preflight/'
    # Get the name of the launchdaemon from the prefs
    launchd_name = utils.pref('osquery_launchd')
    launchd_path = '/Library/LaunchDaemons/'+launchd_name
    

    # Download the current queries
    # cmd = ['/usr/bin/curl', preflighturl]
    # task = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # (queries, stderr) = task.communicate()
    # if task.returncode != 0:
    #     print 'There was a problem downloading the queries for osquery. Stopping so Munki can resume.'
    #     print stderr
    #     sys.exit(0)
    temp_file = os.path.join(tempfile.mkdtemp(), 'tempdata')
    if utils.get_url(preflighturl, temp_file):
        # Make the directories if needed
        mkdir_p('/private/var/log/osquery')
        mkdir_p('/private/var/osquery/sal_packs')

        # Write out the osquery pack
        if os.path.exists('/private/var/osquery/sal_packs/sal.conf'):
            os.remove('/private/var/osquery/sal_packs/sal.conf')

        shutil.copy(temp_file,'/private/var/osquery/sal_packs/sal.conf')

        # stop and reload the launchdaemon for osquery
        subprocess.call(['/bin/launchctl', 'unload', launchd_path])
        subprocess.call(['/bin/launchctl', 'load', launchd_path])

    os.remove(temp_file)
if __name__ == '__main__':
    main()